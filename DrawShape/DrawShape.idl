// DrawShape.idl : ActiveX コントロール プロジェクトのタイプ ライブラリ ソースです。

// このファイルは、[!output PROJECT_NAME].ocx のリソース
// になるタイプ ライブラリ (DrawShape.tlb) を生成するために MIDL コンパイラ ツールによって処理されます。これは次のリソースになります:
// DrawShape.ocx。

#include <olectl.h>
#include <idispids.h>

[ uuid(549e9a52-d80b-4f80-881a-68bfb24305a7), version(1.0),
  control ]
library DrawShapeLib
{
	importlib(STDOLE_TLB);

	//  CDrawShapeCtrl のプライマリ ディスパッチ インターフェイス
	[ 
		uuid(9987a44e-72fb-4e9a-a47f-936fcfe8db17)
	]
	dispinterface _DDrawShape
	{
		properties:
			[id(1)] OLE_COLOR BackColor;
			[id(2)] OLE_COLOR GridColor;
			[id(3)] DOUBLE GridSize;
			[id(4)] OLE_COLOR OriginColor;
			[id(5)] LONG OriginSize;
			[id(6)] OLE_COLOR AxisColor;
			[id(7)] DOUBLE AxisScale;
			[id(8)] VARIANT_BOOL IsDrawGrid;
			[id(9)] VARIANT_BOOL IsDrawOrigin;
			[id(10)] VARIANT_BOOL IsDrawAxis;
			[id(11)] VARIANT_BOOL IsDrawArrow;
			[id(12)] VARIANT_BOOL IsDrawCenter;
			[id(13), nonbrowsable] LONG CurrentLayerNo;
			[id(14), nonbrowsable] LONG LayerCount;
			[id(15)] VARIANT_BOOL CanMouseDragPan;
			[id(16)] VARIANT_BOOL CanMouseWheelZoom;
		methods:
			[id(17)] void Redraw();
			[id(18)] void Clear();
			[id(19)] VARIANT_BOOL SaveImage(BSTR filePath);
			[id(20)] VARIANT_BOOL CopyImage();
			[id(21)] void CanvasToControl(DOUBLE canvasX, DOUBLE canvasY, LONG* pCtrlX, LONG* pCtrlY);
			[id(22)] void ControlToCanvas(LONG ctrlX, LONG ctrlY, DOUBLE* pCanvasX, DOUBLE* pCanvasY);
			[id(23)] VARIANT_BOOL InsertLayer(LONG insertNo);
			[id(24)] void ClearCurrentLayer();
			[id(25)] LONG DeleteCurrentLayer();
			[id(26)] void SetEnableCurrentLayer(VARIANT_BOOL enable);
			[id(27)] VARIANT_BOOL GetEnableCurrentLayer();
			[id(28)] VARIANT_BOOL Zoom(DOUBLE coef, LONG ctrlBaseX, LONG ctrlBaseY);
			[id(29)] VARIANT_BOOL Pan(LONG ctrlMoveX, LONG ctrlMoveY);
			[id(30)] void Fit(DOUBLE shapeOccupancy);
			[id(31)] void ChangePen(LONG style, LONG width, OLE_COLOR color);
			[id(32)] void ChangeBrush(LONG style, OLE_COLOR color, LONG hatch);
			[id(33)] void AddLine(DOUBLE sx, DOUBLE sy, DOUBLE ex, DOUBLE ey);
			[id(34)] void AddInfiniteLine2Point(DOUBLE sx, DOUBLE sy, DOUBLE ex, DOUBLE ey);
			[id(35)] void AddInfiniteLine1PointAngle(DOUBLE x, DOUBLE y, DOUBLE angle);
			[id(36)] void AddPoint(DOUBLE x, DOUBLE y, LONG type);
			[id(37)] void AddArc(DOUBLE sx, DOUBLE sy, DOUBLE ex, DOUBLE ey, DOUBLE cx, DOUBLE cy, VARIANT_BOOL left);
			[id(38)] void AddCircle(DOUBLE cx, DOUBLE cy, DOUBLE radius, VARIANT_BOOL fill);
			[id(39)] VARIANT_BOOL AddPolygon(DOUBLE* pointCoords, LONG pointCoordsCount, VARIANT_BOOL fill);
			[id(40)] void AddSector(DOUBLE sx, DOUBLE sy, DOUBLE ex, DOUBLE ey, DOUBLE cx, DOUBLE cy, DOUBLE innerRadius, VARIANT_BOOL left, VARIANT_BOOL fill);
			[id(41)] void AddOrigin(DOUBLE ox, DOUBLE oy);
			[id(42)] void AddAxis(DOUBLE ox, DOUBLE oy);
	};

	//  CDrawShapeCtrl のイベント ディスパッチ インターフェイス

	[ 
		uuid(21a2e7b0-8b57-408c-bd42-9a7496d43d82)
	]
	dispinterface _DDrawShapeEvents
	{
		properties:
			//  イベント インターフェイスにプロパティがありません。

		methods:
	};

	//  CDrawShapeCtrl のクラス情報
	[
		uuid(92b77edb-2984-4ca7-b136-e337a67cc9bb)
	]
	coclass DrawShape
	{
		[default] dispinterface _DDrawShape;
		[default, source] dispinterface _DDrawShapeEvents;
	};

};
